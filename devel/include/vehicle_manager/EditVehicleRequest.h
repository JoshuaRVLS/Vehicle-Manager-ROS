// Generated by gencpp from file vehicle_manager/EditVehicleRequest.msg
// DO NOT EDIT!


#ifndef VEHICLE_MANAGER_MESSAGE_EDITVEHICLEREQUEST_H
#define VEHICLE_MANAGER_MESSAGE_EDITVEHICLEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_manager
{
template <class ContainerAllocator>
struct EditVehicleRequest_
{
  typedef EditVehicleRequest_<ContainerAllocator> Type;

  EditVehicleRequest_()
    : property()
    , vehicle_id(0)
    , new_value()  {
    }
  EditVehicleRequest_(const ContainerAllocator& _alloc)
    : property(_alloc)
    , vehicle_id(0)
    , new_value(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _property_type;
  _property_type property;

   typedef uint32_t _vehicle_id_type;
  _vehicle_id_type vehicle_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _new_value_type;
  _new_value_type new_value;





  typedef boost::shared_ptr< ::vehicle_manager::EditVehicleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_manager::EditVehicleRequest_<ContainerAllocator> const> ConstPtr;

}; // struct EditVehicleRequest_

typedef ::vehicle_manager::EditVehicleRequest_<std::allocator<void> > EditVehicleRequest;

typedef boost::shared_ptr< ::vehicle_manager::EditVehicleRequest > EditVehicleRequestPtr;
typedef boost::shared_ptr< ::vehicle_manager::EditVehicleRequest const> EditVehicleRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_manager::EditVehicleRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_manager::EditVehicleRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vehicle_manager::EditVehicleRequest_<ContainerAllocator1> & lhs, const ::vehicle_manager::EditVehicleRequest_<ContainerAllocator2> & rhs)
{
  return lhs.property == rhs.property &&
    lhs.vehicle_id == rhs.vehicle_id &&
    lhs.new_value == rhs.new_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vehicle_manager::EditVehicleRequest_<ContainerAllocator1> & lhs, const ::vehicle_manager::EditVehicleRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vehicle_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vehicle_manager::EditVehicleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_manager::EditVehicleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_manager::EditVehicleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_manager::EditVehicleRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_manager::EditVehicleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_manager::EditVehicleRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_manager::EditVehicleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ef4be790a0b331cf4ab6036dc81734b";
  }

  static const char* value(const ::vehicle_manager::EditVehicleRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ef4be790a0b331cULL;
  static const uint64_t static_value2 = 0xf4ab6036dc81734bULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_manager::EditVehicleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_manager/EditVehicleRequest";
  }

  static const char* value(const ::vehicle_manager::EditVehicleRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_manager::EditVehicleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string property\n"
"uint32 vehicle_id \n"
"string new_value\n"
;
  }

  static const char* value(const ::vehicle_manager::EditVehicleRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_manager::EditVehicleRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.property);
      stream.next(m.vehicle_id);
      stream.next(m.new_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EditVehicleRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_manager::EditVehicleRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_manager::EditVehicleRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "property: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.property);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "vehicle_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.vehicle_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "new_value: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.new_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MANAGER_MESSAGE_EDITVEHICLEREQUEST_H
