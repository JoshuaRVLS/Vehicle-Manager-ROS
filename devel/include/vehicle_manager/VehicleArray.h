// Generated by gencpp from file vehicle_manager/VehicleArray.msg
// DO NOT EDIT!


#ifndef VEHICLE_MANAGER_MESSAGE_VEHICLEARRAY_H
#define VEHICLE_MANAGER_MESSAGE_VEHICLEARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <vehicle_manager/Vehicle.h>

namespace vehicle_manager
{
template <class ContainerAllocator>
struct VehicleArray_
{
  typedef VehicleArray_<ContainerAllocator> Type;

  VehicleArray_()
    : vehicles()  {
    }
  VehicleArray_(const ContainerAllocator& _alloc)
    : vehicles(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::vehicle_manager::Vehicle_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::vehicle_manager::Vehicle_<ContainerAllocator> >> _vehicles_type;
  _vehicles_type vehicles;





  typedef boost::shared_ptr< ::vehicle_manager::VehicleArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_manager::VehicleArray_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleArray_

typedef ::vehicle_manager::VehicleArray_<std::allocator<void> > VehicleArray;

typedef boost::shared_ptr< ::vehicle_manager::VehicleArray > VehicleArrayPtr;
typedef boost::shared_ptr< ::vehicle_manager::VehicleArray const> VehicleArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_manager::VehicleArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_manager::VehicleArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vehicle_manager::VehicleArray_<ContainerAllocator1> & lhs, const ::vehicle_manager::VehicleArray_<ContainerAllocator2> & rhs)
{
  return lhs.vehicles == rhs.vehicles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vehicle_manager::VehicleArray_<ContainerAllocator1> & lhs, const ::vehicle_manager::VehicleArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vehicle_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vehicle_manager::VehicleArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_manager::VehicleArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_manager::VehicleArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_manager::VehicleArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_manager::VehicleArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_manager::VehicleArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_manager::VehicleArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee22c20781e6ace64b3a920182332896";
  }

  static const char* value(const ::vehicle_manager::VehicleArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee22c20781e6ace6ULL;
  static const uint64_t static_value2 = 0x4b3a920182332896ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_manager::VehicleArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_manager/VehicleArray";
  }

  static const char* value(const ::vehicle_manager::VehicleArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_manager::VehicleArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Vehicle[] vehicles\n"
"================================================================================\n"
"MSG: vehicle_manager/Vehicle\n"
"string licensePlate\n"
"string make\n"
"string model\n"
"uint32 year\n"
;
  }

  static const char* value(const ::vehicle_manager::VehicleArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_manager::VehicleArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vehicles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_manager::VehicleArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_manager::VehicleArray_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "vehicles: ";
    if (v.vehicles.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.vehicles.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::vehicle_manager::Vehicle_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.vehicles[i]);
    }
    if (v.vehicles.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MANAGER_MESSAGE_VEHICLEARRAY_H
