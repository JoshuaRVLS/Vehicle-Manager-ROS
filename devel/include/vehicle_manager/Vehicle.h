// Generated by gencpp from file vehicle_manager/Vehicle.msg
// DO NOT EDIT!


#ifndef VEHICLE_MANAGER_MESSAGE_VEHICLE_H
#define VEHICLE_MANAGER_MESSAGE_VEHICLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_manager
{
template <class ContainerAllocator>
struct Vehicle_
{
  typedef Vehicle_<ContainerAllocator> Type;

  Vehicle_()
    : licensePlate()
    , make()
    , model()
    , year(0)  {
    }
  Vehicle_(const ContainerAllocator& _alloc)
    : licensePlate(_alloc)
    , make(_alloc)
    , model(_alloc)
    , year(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _licensePlate_type;
  _licensePlate_type licensePlate;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _make_type;
  _make_type make;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _model_type;
  _model_type model;

   typedef uint32_t _year_type;
  _year_type year;





  typedef boost::shared_ptr< ::vehicle_manager::Vehicle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_manager::Vehicle_<ContainerAllocator> const> ConstPtr;

}; // struct Vehicle_

typedef ::vehicle_manager::Vehicle_<std::allocator<void> > Vehicle;

typedef boost::shared_ptr< ::vehicle_manager::Vehicle > VehiclePtr;
typedef boost::shared_ptr< ::vehicle_manager::Vehicle const> VehicleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_manager::Vehicle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_manager::Vehicle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vehicle_manager::Vehicle_<ContainerAllocator1> & lhs, const ::vehicle_manager::Vehicle_<ContainerAllocator2> & rhs)
{
  return lhs.licensePlate == rhs.licensePlate &&
    lhs.make == rhs.make &&
    lhs.model == rhs.model &&
    lhs.year == rhs.year;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vehicle_manager::Vehicle_<ContainerAllocator1> & lhs, const ::vehicle_manager::Vehicle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vehicle_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vehicle_manager::Vehicle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_manager::Vehicle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_manager::Vehicle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_manager::Vehicle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_manager::Vehicle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_manager::Vehicle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_manager::Vehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "479b39ca288c27764f2c6215160e4663";
  }

  static const char* value(const ::vehicle_manager::Vehicle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x479b39ca288c2776ULL;
  static const uint64_t static_value2 = 0x4f2c6215160e4663ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_manager::Vehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_manager/Vehicle";
  }

  static const char* value(const ::vehicle_manager::Vehicle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_manager::Vehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string licensePlate\n"
"string make\n"
"string model\n"
"uint32 year\n"
;
  }

  static const char* value(const ::vehicle_manager::Vehicle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_manager::Vehicle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.licensePlate);
      stream.next(m.make);
      stream.next(m.model);
      stream.next(m.year);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vehicle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_manager::Vehicle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_manager::Vehicle_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "licensePlate: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.licensePlate);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "make: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.make);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "model: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.model);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "year: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.year);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MANAGER_MESSAGE_VEHICLE_H
