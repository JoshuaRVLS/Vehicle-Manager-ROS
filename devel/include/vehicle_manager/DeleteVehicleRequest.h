// Generated by gencpp from file vehicle_manager/DeleteVehicleRequest.msg
// DO NOT EDIT!


#ifndef VEHICLE_MANAGER_MESSAGE_DELETEVEHICLEREQUEST_H
#define VEHICLE_MANAGER_MESSAGE_DELETEVEHICLEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_manager
{
template <class ContainerAllocator>
struct DeleteVehicleRequest_
{
  typedef DeleteVehicleRequest_<ContainerAllocator> Type;

  DeleteVehicleRequest_()
    : vehicle_id(0)  {
    }
  DeleteVehicleRequest_(const ContainerAllocator& _alloc)
    : vehicle_id(0)  {
  (void)_alloc;
    }



   typedef uint32_t _vehicle_id_type;
  _vehicle_id_type vehicle_id;





  typedef boost::shared_ptr< ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DeleteVehicleRequest_

typedef ::vehicle_manager::DeleteVehicleRequest_<std::allocator<void> > DeleteVehicleRequest;

typedef boost::shared_ptr< ::vehicle_manager::DeleteVehicleRequest > DeleteVehicleRequestPtr;
typedef boost::shared_ptr< ::vehicle_manager::DeleteVehicleRequest const> DeleteVehicleRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator1> & lhs, const ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator2> & rhs)
{
  return lhs.vehicle_id == rhs.vehicle_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator1> & lhs, const ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vehicle_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c96f4b8297034815b56c1d26627cd99";
  }

  static const char* value(const ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c96f4b829703481ULL;
  static const uint64_t static_value2 = 0x5b56c1d26627cd99ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_manager/DeleteVehicleRequest";
  }

  static const char* value(const ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 vehicle_id \n"
;
  }

  static const char* value(const ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vehicle_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DeleteVehicleRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_manager::DeleteVehicleRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "vehicle_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.vehicle_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MANAGER_MESSAGE_DELETEVEHICLEREQUEST_H
